Source: corosync-qdevice
Section: admin
Priority: optional
Maintainer: Ubuntu Developers <ubuntu-devel-discuss@lists.ubuntu.com>
XSBC-Original-Maintainer: Debian HA Maintainers <debian-ha-maintainers@lists.alioth.debian.org>
Uploaders:
 Ferenc WÃ¡gner <wferi@debian.org>,
 Valentin Vidic <vvidic@debian.org>,
Standards-Version: 4.5.0
Build-Depends:
 debhelper-compat (= 12),
 libcmap-dev,
 libcorosync-common-dev,
 libnss3-dev,
# protect backports from silent log loss (#898266):
 libqb-dev (>= 1.0.3),
 libsystemd-dev [linux-any],
 libvotequorum-dev,
 pkg-config,
Rules-Requires-Root: no
Homepage: https://github.com/corosync/corosync-qdevice
Vcs-Git: https://salsa.debian.org/ha-team/corosync-qdevice.git
Vcs-Browser: https://salsa.debian.org/ha-team/corosyn-qdevice

Package: corosync-qdevice
Architecture: any
Pre-Depends:
 ${misc:Pre-Depends},
Depends:
 ${shlibs:Depends},
 ${misc:Depends},
 corosync (>= 2),
 libnss3-tools,
Description: cluster engine quorum device daemon
 corosync-qdevice is a daemon running on each node of a cluster. It provides
 a configured number of votes to the quorum subsystem based on a third-party
 arbitrator's decision. Its primary use is to allow a cluster to sustain more
 node failures than standard quorum rules allow. It is recommended for clusters
 with an even number of nodes and highly recommended for 2 node clusters.

Package: corosync-qnetd
Architecture: any
Pre-Depends:
 ${misc:Pre-Depends},
Depends:
 adduser,
 libnss3-tools,
# for ps and w in corosync-qnetd-certutil:
 procps,
 ${shlibs:Depends},
 ${misc:Depends},
Description: cluster engine quorum device network daemon
 Corosync-qnetd is a daemon running outside of the cluster with the purpose
 of providing a vote to the corosync-qdevice model net. It's designed to
 support multiple clusters and be almost configuration and state free.
 New clusters are handled dynamically and no configuration file exists.
 It's also able to run as non-root user - which is recommended.
 Connection between the corosync-qdevice model net client can be optionally
 configured with TLS client certificate checking. The communication protocol
 between server and client is designed to be very simple and allow
 backwards compatibility.
